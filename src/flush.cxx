#include "efi.hxx"
#include "core.hxx"

#include <filesystem>
#include <fstream>
#include <iostream>
#include <vector>
#include <Windows.h>

namespace fs = std::filesystem;

namespace efi
{
    std::vector<std::pair<std::string, u8>> show_whats_changed(const char letter)
    {
        std::string diffScriptPath = std::string(core::tempPath) + std::string("diff.ps1");
        std::ofstream diffScript(diffScriptPath);
        diffScript << "$dir1=\"" + std::string(1, letter) + ":\\\";$dir2 = \"C:\\EFIPartition\\\";$files1 = Get-ChildItem -Recurse -File $dir1 | ForEach-Object {$_.FullName.Replace($dir1, \'\')};$files2 = Get-ChildItem -Recurse -File $dir2 | ForEach-Object {$_.FullName.Replace($dir2, \'\')};$added = $files2 | Where-Object { $_ -notin $files1 };$deleted = $files1 | Where-Object { $_ -notin $files2 };$common = $files1 | Where-Object { $_ -in $files2 };$modified = @();foreach ($file in $common) {$hash1 = Get-FileHash (Join-Path $dir1 $file);$hash2 = Get-FileHash (Join-Path $dir2 $file);if ($hash1.Hash -ne $hash2.Hash) {$modified += $file;}};$addedStr=($added -join \'>\');$modifiedStr=($modified -join \'>\');$deletedStr=($deleted -join \'>\');$diff = \"|$addedStr|$modifiedStr|$deletedStr|\";$diff | Out-File -FilePath \"$env:TEMP\\diff.txt\" -Encoding default;$h = Get-Host; $w = $h.UI.RawUI; $b = $w.BufferSize; $b.Height = 999; $w.BufferSize = $b;";
        diffScript.close();
        
        system(("@type \"" + diffScriptPath + "\" | powershell >nul 2>nul").c_str());
        fs::remove_all(diffScriptPath);
        
        std::string diffFilePath = std::string(core::tempPath) + std::string("diff.txt");
        std::string diffLine;
        std::ifstream diffFile(diffFilePath);
        std::getline(diffFile, diffLine);
        diffFile.close();
        fs::remove_all(diffFilePath);
        std::vector<std::pair<std::string, u8>> files;
        u8 fileCategory = 0; // 0 - added | 1 = modified | 2 = deleted
        size_t it = 0;
        // Parse a string that contains filenames in this format: "|added_file1>added_file2|modified_file1>modified_file2|deleted_file1>deleted_file2|"
        // This string is generated by the inlined PowerShell script ("src/script.ps1") on line 18 which writes it to a text file ("%temp%/diff.txt")
        while (it < diffLine.size())
        {
            if (fileCategory == 3)
                break;

            if (diffLine[it] == '|')
                ++it;

            while (diffLine[it] != '|')
            {
                std::string thisFile = "";
                while (diffLine[it] != '>' && diffLine[it] != '|')
                {
                    thisFile.push_back(diffLine[it]);
                    ++it;
                }
                if (thisFile != ".winefimounter")
                    files.push_back(std::make_pair(thisFile, fileCategory)); // Ensure the user doesn't touch the cache file
                
                if (diffLine[it] == '>')
                    ++it;
            }
            ++fileCategory;
        }
        system("@cls");
        bool present = false;
        std::cout << "\n   Here's a summary of what's changed: \n\n";
        std::cout << "\tFiles added:\n";
        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 0)
            {
                present = true;
                std::cout << "\t\t+";
                core::change_text_color(COLOR_GREEN);
                std::cout << files[i].first << "\n";
                core::change_text_color(COLOR_GREY);
            }
        }
        if (!present)
        {
            core::change_text_color(COLOR_DARK_GREY);
            std::cout << "\t\tNo file was added\n";
            core::change_text_color(COLOR_GREY);
        }

        present = false;
        std::cout << "\n\tFiles deleted:\n";
        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 2)
            {
                present = true;
                std::cout << "\t\t-";
                core::change_text_color(COLOR_RED);
                std::cout << files[i].first << "\n";
                core::change_text_color(COLOR_GREY);
            }
        }
        if (!present)
        {
            core::change_text_color(COLOR_DARK_GREY);
            std::cout << "\t\tNo file was deleted\n";
            core::change_text_color(COLOR_GREY);
        }

        present = false;
        std::cout << "\n\tFiles modified:\n";
        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 1)
            {
                present = true;
                std::cout << "\t\t*";
                core::change_text_color(COLOR_YELLOW);
                std::cout << files[i].first << "\n";
                core::change_text_color(COLOR_GREY);
            }
        }
        if (!present)
        {
            core::change_text_color(COLOR_DARK_GREY);
            std::cout << "\t\tNo file was modified\n";
            core::change_text_color(COLOR_GREY);
        }
        
        core::change_text_color(COLOR_GREY);
        return files;
    }
    
    void flush_partition(EfiPartition efi)
    {
    apply:
        std::cout << "\n   - Hit ";
        core::change_text_color(COLOR_BLUE);
        std::cout << "A";
        core::change_text_color(COLOR_GREY);
        std::cout << " to apply the changes to the EFI partition...";
        system("@choice /n /c a");
        std::cout << "\n Loading...";
        std::vector<std::pair<std::string, u8>> files = show_whats_changed(efi.letter);
    prompt:
        std::cout << "\n   - Hit ";
        core::change_text_color(COLOR_BLUE);
        std::cout << "A";
        core::change_text_color(COLOR_GREY);
        std::cout << " again to apply the changes or ";
        core::change_text_color(COLOR_RED);
        std::cout << "B";
        core::change_text_color(COLOR_GREY);
        std::cout << " if you still want to make a last-minute change...";
        switch (system("@choice /n /c ab"))
        {
            case 1:
                break;

            case 2:
            {
                std::cout << "\n Sure, take your time.\n";
                goto apply;
            }

            default:
                goto prompt;
        }
        system("@mode 120, 30");
        SetConsoleTitleA("WinEFIMounter v1.0.3 (Flushing...)");
        std::cout << "\n > Updating files...\n";
        bool err = false;
        // Added files are updated first, modified files last
        for (size_t i = 0; i < files.size(); ++i)
        {
            if (err)
                break;
            
            if (files[i].second == 0) // 1. If added, copy file and mark as backed up
            {
                try
                {
                    err |= !core::copy_file_sub(std::string("C:\\EFIPartition\\") + files[i].first, std::string(1, efi.letter) + std::string(":\\") + files[i].first);
                }
                catch(const std::exception& e)
                {
                    err = true;
                    core::change_text_color(COLOR_DARK_GREY);
                    std::cerr << "\n Error when adding files: " << e.what();
                    break;
                }
                files[i].second = 4; // and mark the file as backed up
            }
        }
        if (err)
        {
            for (size_t i = 0; i < files.size(); ++i)
            {
                if (files[i].second == 4) // Remove added files if error
                    fs::remove_all(std::string(1, efi.letter) + std::string(":\\") + files[i].first);
            }

            core::change_text_color(COLOR_YELLOW);
            std::cerr << "\n [!!] An error occurred while applying changes!\n      All the files you've modified will be kept inside of \"C:\\EFIPartition\\\" \n      so that no work is lost, while the changes to the EFI partition will be reverted.\n      Please make sure to back up the updated files, then delete the directory\n      and try again.\n      Press any key to go back to the main menu...\n";
            core::change_text_color(COLOR_GREY);
            system("@pause >nul");
            return;
        }

        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 2) // 2. If deleted, delete
            {
                if (err)
                    break;

                try 
                {
                    err |= !core::copy_file_sub(std::string(1, efi.letter) + std::string(":\\") + files[i].first, std::string("C:\\EFIPartition\\") + files[i].first); // Back up the file just in case
                    err |= !fs::remove(std::string(1, efi.letter) + std::string(":\\") + files[i].first);    
                }
                catch(const std::exception& e)
                {
                    err = true;
                    core::change_text_color(COLOR_DARK_GREY);
                    std::cerr << "\n Error when deleting files: " << e.what();
                    break;
                }
                files[i].second = 5; // and mark the file as backed up
            }
        }
        if (err)
        {
            for (size_t i = 0; i < files.size(); ++i)
            {
                if (files[i].second == 4) // Remove added files if error
                    fs::remove_all(std::string(1, efi.letter) + std::string(":\\") + files[i].first);

                if (files[i].second == 5) // Restore backed up files
                {
                    core::copy_file_sub(std::string("C:\\EFIPartition\\") + files[i].first, std::string(1, efi.letter) + std::string(":\\") + files[i].first);
                    fs::remove_all(std::string("C:\\EFIPartition\\") + files[i].first);
                }
            }

            core::change_text_color(COLOR_YELLOW);
            std::cerr << "\n [!!] An error occurred while applying changes!\n      All the files you've modified will be kept inside of \"C:\\EFIPartition\\\" \n      so that no work is lost, while the changes to the EFI partition will be reverted.\n      Please make sure to back up the updated files, then delete the directory\n      and try again.\n      Press any key to go back to the main menu...\n";
            core::change_text_color(COLOR_GREY);
            system("@pause >nul");
            return;
        }

        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 1) // 3. If modified, update
            {
                if (err)
                    break;

                try
                {
                    err |= !core::copy_file_sub(std::string(1, efi.letter) + std::string(":\\") + files[i].first, std::string("C:\\EFIPartition\\winefimounter_backup\\") + files[i].first); // Back up the file just in case
                    err |= !core::copy_file_sub(std::string("C:\\EFIPartition\\") + files[i].first, std::string(1, efi.letter) + std::string(":\\") + files[i].first);
                }
                catch(const std::exception& e)
                {
                    err = true;
                    core::change_text_color(COLOR_DARK_GREY);
                    std::cerr << "\n Error when updating files: " << e.what();
                    break;
                }
                files[i].second = 6; // and mark the file as backed up
            }
        }
        if (err)
        {
            for (size_t i = 0; i < files.size(); ++i)
            {
                if (files[i].second == 4) // Remove added files if error
                    fs::remove_all(std::string(1, efi.letter) + std::string(":\\") + files[i].first);

                if (files[i].second == 5) // Restore backed up deleted files
                {
                    core::copy_file_sub(std::string("C:\\EFIPartition\\") + files[i].first, std::string(1, efi.letter) + std::string(":\\") + files[i].first);
                    fs::remove_all(std::string("C:\\EFIPartition\\") + files[i].first);
                }

                if (files[i].second == 6) // Restore backed up modified files
                {
                    core::copy_file_sub(std::string("C:\\EFIPartition\\winefimounter_backup\\") + files[i].first, std::string(1, efi.letter) + std::string(":\\") + files[i].first);
                    fs::remove_all(std::string("C:\\EFIPartition\\winefimounter_backup\\") + files[i].first);
                }
            }
            fs::remove_all("C:\\EFIPartition\\winefimounter_backup");
            core::change_text_color(COLOR_YELLOW);
            std::cerr << "\n [!!] An error occurred while applying changes!\n      All the files you've modified will be kept inside of \"C:\\EFIPartition\\\" \n      so that no work is lost, while the changes to the EFI partition will be reverted.\n      Please make sure to back up the updated files, then delete the directory\n      and try again.\n      Press any key to go back to the main menu...\n";
            core::change_text_color(COLOR_GREY);
            system("@pause >nul");
            return;
        }
        fs::remove_all("C:\\EFIPartition\\winefimounter_backup");
        for (size_t i = 0; i < files.size(); ++i)
        {
            if (files[i].second == 5) // Remove backed up files on success
                fs::remove_all(std::string("C:\\EFIPartition\\") + files[i].first);
        }
        
        fs::remove_all("C:\\EFIPartition");

        std::cout << "\n > ";
        core::change_text_color(COLOR_GREEN);
        std::cout << "Done!\n"; 
        core::change_text_color(COLOR_GREY);
        std::cout << "\n All the files have been updated successfully.\n The previous configuration of the EFI partition is available inside of \"";
        core::change_text_color(COLOR_BLUE);
        std::cout << "C:\\EFIPartition_backup\\"; 
        core::change_text_color(COLOR_GREY);
        std::cout << "\" in case\n you still need it.\n\n Press any key to go back to the main menu...";
        system("@pause >nul");
        return;
    }
}